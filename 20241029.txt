1. 변수
    1) 전역변수 - 여러 메서드에서 사용 가능
      . 데이터형 변수명;  instance(멤버) 변수 - 객체를 생성한 후에 사용
      . static 데이터형 변수명; 클래스 변수, 정적변수 - program을 loading하면 바로 사용 클래스명.변수명
                                                                    공용
    2) 지역변수 - 메서드 안에서 생성된 변수 , 해당해는 메서드에서만 사용 가능
    3) 종단변수 - 값의 변경을 금지
        final 데이터형 변수명
        대문자로 표시
        프로그램 이해에 도움
2. 생성자
   - 모든 클래스는 하나 이상의 생성자
   - 생성자가 하나도 없을 경우에는 컴파일할 때 기본 생성자를 만들어 준다
   %. 기본 생성자 : 매개변수가 하나도 없고 실행문도 없는 생성자
   - (접근지정자) 생성자명(매개변수,.....) {  
            .....
    }
   - 생성자의 이름은 클래스명과 동일
   - 생성자 overloading : 매개변수의 갯수가 다르거나 데이터형이 다르면 생성자를 여러개 만들 수 있다
     overloading 하는 이유
     %. 자동차 살 때
          . 자동차() : 매개변수 없음, option없음
          . 자동차(에어백) 매개변수 1개
          . 자동차(에어백, 안티브레이크) 매개변수 2개
          . 자동차(색깔변경, 오디오, 네비게이터) 매개변수 3개
   - 멤버변수를 초기화
3. 초기화
   1) 변수에 값을 대입
   2) 생성자를 사용하여 초기화
   3) 초기화 블럭
      class 클래명 {
           데이터형 변수명;
           ...
           {  // 인스턴스 초기화 블럭
              초기화 문장;   // 인스턴스 변수, 클래스 변수
              ...
           }
           static {  // 클래스 초기화 블럭
               초기화 문장  // 클래스변수만 가능
                ...
             }
4. 메서드
   1) 실행문을 여러개 묶어서 이름을 부여
   2) 요청(호출) 작업을 실행 - 결과를 반환, 결과 반환 하지 않음
   3) [접근지정자] 반환형 메서드명(매개변수,....) {  // 선언부
          실행문;                                                // 구현부
           ...
       }
   4) 반환형의 종류
       void : 반환할 것이 없는 경우
       데이터형(int, float,.....)  return 변수/값/식; - 변수나 값은 반환형의 데이터형과 일치
       %. return : 메서드가 종료
5. 메서드 종류
   인스탄스 메서드 - 객체를 생성한 후에 사용 가능
      [접근 지정자] 반환형 메서드명(매개변수(parameter),...) {  // 선언부
               실행문;                                                           // 구현부
                ...
       }
   클래스 메서드 - 객체를 생성하지 않고 program이 laoding되면 바로 사용 가능 클래스명.메서드명()
                                                              클래스명과 실행문(main)이 있는 클래스명과 같으면 생략 가능
        [접근 지정자] 반환형 메서드명(매개변수(parameter),...) {
               실행문;
                ...
       }
6. 매개변수(parameter) 종류
   1) Call By Value
       기본형(정수, 실수, 문자, 문자열, boolean형)은 값이 전달
       메서드 안에서 변경된 변수의 값은 메서드 밖의 변수의 값과 상관 없다
   2) Call By Reference 
       참조형(배열, 객체) - 주소를 전달
       메서드 안에서 값이 변경되면 메서드 밖에도 영향을 미친다
 
  // Teacher 이름, 나이, subject(과목)  th1 보검 32 자바, th2 제니 27 DB
   // Manager 이름, 나이. part(담당)     mg1 박명수 52 화장실청소, mg2 유재석 51 식당보조
// Person2Ex st1 차은우 31 1반, st2 하니 17 2반

계승 또는 factorial
 5! = 5 * 4 * 3 * 2 * 1 = 120
 6! = 6 * 5 * 4 * 3 * 2 * 1 = 720
 3! = 3 * 2 * 1 = 6

- 반복문
  재귀함수(recusive function) : 자기 자신의 함수를 부르는 함수 

상속  
 class 자식 extends 부모클래스

class 날아 다니는 것
           |
-----------------------
비행기     참새
     |          |
    ------------

Inher2
class B1  int k1 = 7
             void m1() 난 할아버지 메서드
class B2 B1 상속
   int k2 = 22
    void m2() 난 아버지 메서드
class B3 B2를 상속
  int k3 = 77
  void m3() 난 자식 메서드
Inher2 main
  B3 b3 를 생성
   k1, k2, k3
   m1() m2() m3()
